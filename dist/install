touch ./install-vars

setvar () {
    grep -v "^$1=" ./install-vars > ./install-vars.new && mv ./install-vars.new ./install-vars
    echo "$1=$2" >> ./install-vars
}

getvar () {
    value=$(grep "^$1=" ./install-vars | tail -n 1 | sed "s/^$1=//")
}
DISTRO_DL="https://git.io/vXbTE"

init () {
    timedetect1 set-ntp true
}

autoPartition () {
    parted $1 --script mklabel msdos \
           mkpart primary ext4 3MiB 100% \
           set 1 boot on 2> /tmp/err || errorDialog "Failed to create disk partitions"

    yes | mkfs.ext4 "${1}1" > /dev/null 2> /tmp/err || error "Failed to format the boot partition"
    yes | mkfs.ext4 "${1}2" > /dev/null 2> /tmp/err || error "Failed to format the root partition"

    mount "${1}1" /mnt
    setvar "system-partition" "${1}2"
}

installCoreSystem () {
    getvar "system-partition"
    systempt=$value

    getvar "disk"
    disk=$value

    pacstrap /mnt base
    genfstab -U /mnt >> /mnt/etc/fstab

    arch-chroot /mnt <<EOF
mkdir -p /usr/local/installer && cd /usr/local/installer
curl -L $DISTRO_DL > ./install
echo -e "system-partition=$systempt\ndisk=$disk\ncore-install-step=done\npartition-step=done" > ./install-vars
chmod +x ./install
pacman -S --noconfirm dialog
./install continue
EOF
}

installGRUB () {
    pacman -S --noconfirm grub 2> /tmp/err || errorDialog "Failed to install GRUB"
    getvar "disk"
    grub-install --target=i386-pc --recheck $value 2> /tmp/err || errorDialog "Failed to install GRUB"
}

localize () {
    tzselect 2> /tmp/err || errorDialog "tzselect is missing"
    hwclock --systohc
    sed -i -e '/^#en_US/s/^#//' /etc/locale.gen # uncomment lines starting with #en_US
    locale-gen 2> /tmp/err || errorDialog "locale-gen is missing"

    # FIX ME: Allow user to choose language and keyboard
    echo "LANG=en_US.UTF-8" >> /etc/locale.conf
    echo "FONT=Lat2-Terminus16" >> /etc/vconsole.conf
}

createUser () {
    useradd -m -s /usr/bin/zsh $1
    echo "$1:$2" | chpasswd

    echo "$1 ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    echo $1 > /etc/hostname
    echo "127.0.1.1	$1.localdomain	$1" >> /etc/hosts
}

linkDotFiles () {
    getvar "dot-files-repo"
    dotFilesRepo=$value

    getvar "username"
    username=$value

    dotFilesBase=$(basename "$dotFilesRepo")

    runuser -u -azer -c <<EOF
git clone $dotFilesRepo ~/.
ln -s ~/${dotFilesBase}/.* ~/
EOF
}

installLTSKernel () {
    pacman -S --noconfirm linux-lts linux-lts-headers 2> /tmp/err || error "Can not install Linux LTS Kernel"
    sed -i '/GRUB_DEFAULT=0/c\GRUB_DEFAULT=saved' /etc/default/grub
    sed -i '/GRUB_GFXMODE=auto/c\GRUB_GFXMODE=1024x768x32' /etc/default/grub
    sed -i -e '/^#GRUB_COLOR_NORMAL/s/^#//' /etc/locale.gen
    sed -i -e '/^#GRUB_COLOR_HIGHLIGHT/s/^#//' /etc/locale.gen
    echo "GRUB_SAVEDEFAULT=true" >> /etc/default/grub
    echo "GRUB_DISABLE_SUBMENU=y" >> /etc/default/grub
}

installNode () {
	  runuser -u azer -c <<EOF
curl https://raw.github.com/creationix/nvm/master/install.sh | bash
source ~/.nvm/nvm.sh
nvm install 7.1.0
nvm use 7.1.0
nvm alias default 0.10
EOF
}

installOhMyZSH () {
    runuser -u azer -c '$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)'
}

installSpacemacs () {
    git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
}

installVimrc () {
    git clone git://github.com/amix/vimrc.git ~/.vim_runtime
    sh ~/.vim_runtime/install_awesome_vimrc.sh
}

installVimJanus () {
    curl -L https://bit.ly/janus-bootstrap | bash
}

installVirtualBox () {
    pacman --noconfirm -Sy virtualbox-guest-utils virtualbox-guest-modules virtualbox-guest-modules-lts virtualbox-guest-dkms
    echo "vboxguest\nvboxsf\nvboxvideo" > /etc/modules-load.d/virtualbox.conf
    systemctl enable vboxservice.service
}

installExtraPackages () {
    pacman --noconfirm -Syu 2> /tmp/err || errorDialog "Can not install updates."
    pacman -S \
           --noconfirm \
           base-devel \
           net-tools \
           pkgfile \
           xf86-video-vesa \
           xorg-server \
           xorg-server-utils \
           xorg-apps \
           ttf-dejavu \
           ttf-droid \
           ttf-inconsolata \
           ttf-symbola \
           ttf-bitstream-vera \
           terminus-font \
           curl \
           wget \
           git \
           tmux \
           zsh \
           firefox \
           xmonad \
           xmobar \
           feh \
           scrot \
           moc \
           newsbeuter \
           dmenu \
           rxvt-unicode \
           emacs \
           vim \
           htop \
           go 2> /tmp/err || errorDialog "Failed to complete installing extra packages"
}
CHECK="[OK]"

welcomeMenu () {
    dialog --title "=^.^=" \
           --backtitle "Happy Hacking Linux" \
           --defaultno \
           --no-label "Next Step" \
           --yes-label "Main Menu" \
           --yesno "Oh, hai. This is the installation wizard of Happy Hacking Linux. If you already started the installation, you can jump to the main menu and run a specific installation step. Otherwise, just hit the next button. \n\nIf you need help or wanna report an issue, go to github.com/azer/happy-hacking-linux" 13 55

    selected=$?
}

mainMenu () {
    icon1=""
    icon2=""
    icon3=""
    icon4=""
    icon5=""

    getvar "partition-step"
    if [ "$value" = "done" ]; then
        icon1="${CHECK} "
    fi

    getvar "core-install-step"
    if [ "$value" = "done" ]; then
        icon2="${CHECK} "
    fi

    getvar "boot-install-step"
    if [ "$value" = "done" ]; then
        icon3="${CHECK} "
    fi

    getvar "localization-step"
    if [ "$value" = "done" ]; then
        icon4="${CHECK} "
    fi

    getvar "users-step"
    if [ "$value" = "done" ]; then
        icon5="${CHECK} "
    fi

    selected=$(dialog --stdout \
                      --title "=^.^=" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Select" \
                      --nocancel \
                      --menu "Complete the following installation steps one by one." 16 55 8 \
                      1 "${icon1}Setup Disk Partitions" \
                      2 "${icon2}Install Core Packages" \
                      3 "${icon3}Install Boot (GRUB)" \
                      4 "${icon4}Localization" \
                      5 "${icon5}Users" \
                      6 "Install Extras" \
                      7 "Reboot")
}

extrasMenu () {
    selected=$(dialog --stdout \
                      --title "Install Extras" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Install" \
                      --cancel-label "Main Menu" \
                      --menu "You can optionally setup some extra stuff, or return to main menu and reboot." 16 55 7 \
                      1 "dotfiles" \
                      2 "spacemacs: emacs distribution" \
                      3 "amix/vimrc: popular vim distributon" \
                      4 "VirtualBox Guest Additions")
}

diskMenu () {
    disks=$(lsblk -r | grep disk | cut -d" " -f1,4 | nl)
    disksArray=()
    while read i name size; do
        disksArray+=($i "/dev/$name ($size)")
    done <<< "$disks"

    selected=$(dialog --stdout \
                      --title "Installation Disk" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Next" \
                      --cancel-label "Main Menu" \
                      --menu "Select A Disk" \
                      15 30 30 \
                      "${disksArray[@]}")

    selected=$(lsblk -r | grep disk | cut -d" " -f1 | sed -n "${selected}p")
    selected="/dev/${selected}"
    setvar "disk" "$selected"
}

partitionMenu () {
    selected=$(dialog --stdout \
                      --title "Setup Disk Partitions" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Select" \
                      --cancel-label "Main Menu" \
                      --menu "How do you want to create partitions? If you got nothing to lose in $1, just go with the simple option and format the disk completely. Or, choose one of the tools to modify your disk in your own risk." 17 55 5 \
                      1 "Simple: Erase Everything on $1" \
                      2 "Manual: Using cfdisk" \
                      3 "Manual: Using fdisk" \
                      4 "Manual: Using GNU Parted")
}

partitionSelectionForm () {
    values=$(dialog --stdout \
                    --ok-label "Done" \
	                  --backtitle "Happy Hacking Linux" \
	                  --title "Select Partitions" \
                    --nocancel \
	                  --form "" \
                    7 50 0 \
	                  "Root: "    2 1	"${1}1"  	2 10 45 0)

    systempt=$(echo "$values" | tail -n1)

    if [[ -z "${systempt// }" ]]; then
        dialog --title "Select System Partition" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "Sorry, you have to choose the partition you'd like to install the system." 6 50
        partitionSelectionForm
    else
        setvar "system-partition" $systempt
    fi
}

usernameDialog () {
    username=$(dialog --stdout \
                      --title "Creating Users" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Done" \
                      --nocancel \
                      --inputbox "Choose your username" 8 50)

    if [[ -z "${username// }" ]]; then
        dialog --title "Creating Users" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "A username is required, try again" 5 50
        usernamedDialog
    fi
}

passwordDialog () {
    password=$(dialog --stdout \
                           --title "Creating User" \
                           --backtitle "Happy Hacking Linux" \
                           --ok-label "Done" \
                           --nocancel \
                           --passwordbox "Type a new password:" 8 50)

    passwordRepeat=$(dialog --stdout \
                            --title "Creating User" \
                            --backtitle "Happy Hacking Linux" \
                            --ok-label "Done" \
                            --nocancel \
                            --passwordbox "Verify your new password:" 8 50)

    if [ "$password" != "$passwordRepeat" ]; then
        dialog --title "Password" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "Passwords you've typed don't match. Try again." 5 50
        passwordDialog
    fi

    if [[ -z "${password// }" ]]; then
        dialog --title "Password" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "A password is required. Try again." 5 50
        passwordDialog
    fi
}

errorDialog () {
    echo "$1\n\n" > ./install-errors.log
    [[ -f ~/tmp/err ]] && cat /tmp/err >> ./install-errors.log

    echo "Message: $1\nOutput: \n" | cat - /tmp/err > /tmp/err.bak && mv /tmp/err.bak /tmp/err

    dialog --title "Oops, there was an error" \
           --backtitle "Happy Hacking Linux" \
           --textbox /tmp/err 20 50

    rm /tmp/err
    mainMenuStep
}

dotFilesDialog () {
    getvar "username"

    dotFilesRepo=$(dialog --stdout \
                          --title "dotfiles" \
                          --backtitle "Happy Hacking Linux" \
                          --cancel-label "Skip" \
                          --ok-label "Clone & Link All" \
                          --inputbox "Where is your dotfiles located?" 8 50 "git@github.com:"$username"/dotfiles.git")
}
command=$1

mainMenuStep () {
    mainMenu

    if [ "$selected" = "1" ]; then
        partitionStep
    elif [ "$selected" = "2" ]; then
        coreInstallStep
    elif [ "$selected" = "3" ]; then
        installBootStep
    elif [ "$selected" = "4" ]; then
        localizationStep
    elif [ "$selected" = "5" ]; then
        usersStep
    elif [ "$selected" = "6" ]; then
        extrasMenuStep
    elif [ "$selected" = "7" ]; then
        rebootStep
    else
        mainMenuStep
    fi
}

extrasMenuStep () {
    extrasMenu

    if [ "$selected" = "1" ]; then
        dotFilesStep
    elif [ "$selected" = "2" ]; then
        installSpacemacsStep
    elif [ "$selected" = "3" ]; then
        installVimrcStep
    elif [ "$selected" = "4" ]; then
        installVirtualBoxStep
    else
        mainMenuStep
    fi
}

installVirtualBoxStep () {
    dialog --infobox "Installing VirtualBox Guest Additions" 10 50; installVirtualBox
    extrasMenuStep
}

installVimrc () {
    dialog --infobox "Installing amix/vimrc" 10 50; installVimrc
    extrasMenuStep
}

installSpacemacs () {
    dialog --infobox "Installing spacemacs" 10 50; installSpacemacs
    extrasMenuStep
}

installOhMyZSHStep () {
    dialog --infobox "Installing ZSH" 10 50; installZSH
}

installNodeStep () {
    dialog --infobox "Installing ZSH" 10 50; installNode
}

dotFilesStep () {
    dotFilesDialog

    if [[ -n "${dotFilesRepo// }" ]]; then
        setvar "dot-files-repo" $dotFilesRepo

        dialog --infobox "Linking your dotfiles in ~/" 10 50; linkDotFiles

        if [ -f /home/$username/$dotFilesBase/happy-hacking-post-install.sh ]; then
            dialog --infobox "Running personal post-install commands..." 10 50; sh /home/$username/$dotFilesBase/happy-hacking-post-install.sh
        fi
    fi

    extrasMenuStep
}

rebootStep () {
    dialog --infobox "Cya!" 10 50; reboot
}

usersStep () {
  getvar "users-step"
  if [ "$value" != "done" ]; then
      usernameDialog
      setvar "username" $username

      passwordDialog
      createUser $username $password

      installOhMyZSHStep
      installNodeStep

      setvar "users-step" "done"
  fi

  mainMenuStep
}

localizationStep () {
    getvar "localization-step"
    if [ "$value" != "done" ]; then
        localize
        setvar "localization-step" "done"
    fi

    usersStep
}

installBootStep () {
    getvar "boot-install-step"
    if [ "$value" != "done" ]; then
        dialog --infobox "Installing GRUB for /boot" 10 50; installGRUB
        setvar "boot-install-step" "done"
    fi

    localizationStep
}

switchToLTSStep () {
    getvar "lts-step"
    if [ "$value" != "done" ]; then
        dialog --infobox "Switching to Linux LTS Kernel as it's more stable." 10 50; installLTSKernel
        setvar "lts-step" "done"
    fi
}

installExtraPackagesStep () {
    dialog --infobox "Installing some additional packages, this may take some time" 10 50; installExtraPackages
}

coreInstallStep () {
    getvar "core-install-step"
    if [ "$value" != "done" ]; then
        dialog --infobox "Installing core system packages, please wait..." 10 50; installCoreSystem
        afterCoreInstallStep
        setvar "core-install-step" "done"
    fi
}

afterCoreInstallStep () {
    switchToLTSStep
    installExtraPackagesStep
    installBootStep
}

partitionStep () {
    diskMenu
    disk=$selected

    partitionMenu $disk

    if [ "$selected" = "1" ]; then
        autoPartition $disk
    elif [ "$selected" = "2" ]; then
        cfdisk $disk
        partitionSelectionForm $disk
    elif [ "$selected" = "3" ]; then
        fdisk $disk
        partitionSelectionForm $disk
    elif [ "$selected" = "4" ]; then
        parted $disk
        partitionSelectionForm $disk
    elif [ "$selected" = "5" ]; then
        mainMenuStep
    else
        mainMenuStep
    fi

    setvar "partition-step" "done"
    coreInstallStep
}

startingStep () {
    init
    welcomeMenu

    if [ "$selected" = "1" ]; then
        partitionStep
    else
        mainMenuStep
    fi
}

if [ "$command" = "continue" ]; then
    afterCoreInstallStep
else
    startingStep
fi
