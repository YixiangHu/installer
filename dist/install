touch ./install-vars

setvar () {
    grep -v "^$1=" ./install-vars > ./install-vars.new && mv ./install-vars.new ./install-vars
    echo "$1=$2" >> ./install-vars
}

getvar () {
    value=$(grep "^$1=" ./install-vars | tail -n 1 | sed "s/^$1=//")
}
detectTimezone () {
    if command_exists tzupdate ; then
        dialog --infobox "Please wait, detecting your timezone... " 5 50; detected=$(tzupdate -p | sed "s/Detected timezone is //" | sed "s/\.//")
        return
    fi

    detected=""
}

tzOptionsByRegion () {
    options=$(cd /usr/share/zoneinfo/$1 && find . | sed "s|^\./||" | sed "s/^\.//" | sed '/^$/d')
}

tzRegions () {
    regions=$(find /usr/share/zoneinfo/. -maxdepth 1 -type d | cut -d "/" -f6 | sed '/^$/d')
}

tzSelectionMenu () {
    detectTimezone

    if [[ -n "${detected// }" ]]; then
        if [ -f "/usr/share/zoneinfo/$detected" ]; then
           offset=$(TZ="$detected" date +%z | sed "s/00$/:00/g")

           dialog --title "Timezones" \
                  --backtitle "Happy Hacking Linux" \
                  --yes-label "Yes, correct" \
                  --no-label "No, I'll choose it" \
                  --yesno "Your timezone was detected as $detected ($offset). Is it correct?" 7 50
           selected=$?

           if [ "$selected" = "0" ]; then
               tzupdate > /dev/null
           fi
        fi
    fi

    tzRegions
    regionsArray=()
    while read name; do
        regionsArray+=($name "")
    done <<< "$regions"

    region=$(dialog --stdout \
                      --title "Timezones" \
                      --backtitle "$1" \
                      --ok-label "Next" \
                      --no-cancel \
                      --menu "Select a continent or ocean from the menu:" \
                      20 30 30 \
                      "${regionsArray[@]}")

    tzOptionsByRegion $region

    optionsArray=()
    while read name; do
        offset=$(TZ="$region/$name" date +%z | sed "s/00$/:00/g")
        optionsArray+=($name "($offset)")
    done <<< "$options"

    tz=$(dialog --stdout \
                    --title "Timezones" \
                    --backtitle "$1" \
                    --ok-label "Next" \
                    --cancel-label "Back to Regions" \
                    --menu "Select your timezone in ${region}:" \
                    20 40 30 \
                    "${optionsArray[@]}")

    if [[ -z "${tz// }" ]]; then
        tzSelectionMenu
    else
        selected="/usr/share/zoneinfo/$region/$tz"
    fi
}

command_exists () {
    type "$1" &> /dev/null ;
}
DISTRO_DL="https://git.io/vXbTE"

init () {
    timedetect1 set-ntp true
}

autoPartition () {
    parted $1 --script mklabel msdos \
           mkpart primary ext4 3MiB 100% \
           set 1 boot on 2> /tmp/err || errorDialog "Failed to create disk partitions"

    yes | mkfs.ext4 "${1}1" > /dev/null 2> /tmp/err || error "Failed to format the boot partition"
    yes | mkfs.ext4 "${1}2" > /dev/null 2> /tmp/err || error "Failed to format the root partition"

    mount "${1}1" /mnt
    setvar "system-partition" "${1}2"
}

installCoreSystem () {
    getvar "system-partition"
    systempt=$value

    getvar "disk"
    disk=$value

    pacstrap /mnt base
    genfstab -U /mnt >> /mnt/etc/fstab

    arch-chroot /mnt <<EOF
mkdir -p /usr/local/installer && cd /usr/local/installer
curl -L $DISTRO_DL > ./install
echo -e "system-partition=$systempt\ndisk=$disk\ncore-install-step=done\npartition-step=done" > ./install-vars
chmod +x ./install
pacman -S --noconfirm dialog
./install continue
EOF
}

installGRUB () {
    pacman -S --noconfirm grub > /dev/null 2> /tmp/err || errorDialog "Failed to install GRUB. Are you connected to internet?"
    getvar "disk"
    grub-install --target=i386-pc --recheck $value > /dev/null 2> /tmp/err || errorDialog "Failed to run grub-install"
}

localize () {
    yes | pip install tzupdate > /dev/null 2> /dev/null # ignore if it fails, let user choose tz

    tzSelectionMenu "Happy Hacking Linux"

    hwclock --systohc
    sed -i -e '/^#en_US/s/^#//' /etc/locale.gen # uncomment lines starting with #en_US
    locale-gen 2> /tmp/err || errorDialog "locale-gen is missing"

    # FIX ME: Allow user to choose language and keyboard
    echo "LANG=en_US.UTF-8" >> /etc/locale.conf
    echo "FONT=Lat2-Terminus16" >> /etc/vconsole.conf
}

createUser () {
    useradd -m -s /usr/bin/zsh -c $3 $1
    echo "$1:$2" | chpasswd

    echo "$1 ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    echo $1 > /etc/hostname
    echo "127.0.1.1	$1.localdomain	$1" >> /etc/hosts
}

linkDotFiles () {
    getvar "username"
    username=$value

    dotFilesBase=$(basename "$1" | cut -f 1 -d '.')
    runuser -l $username -c "git clone $1 ~/${dotFilesBase} && ln -s ~/${dotFilesBase}/.* ~/." > /dev/null 2> /tmp/err || errorDialog "Can not install dotfiles at $1 :/"
}

installNode () {
    getvar "username"
    username=$value

	  runuser -l $username -c <<EOF
curl https://raw.github.com/creationix/nvm/master/install.sh | bash
source ~/.nvm/nvm.sh
nvm install 7.1.0
nvm use 7.1.0
nvm alias default 0.10
EOF
}

installOhMyZSH () {
    runuser -l azer -c 'sh -c $(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)'
}

installVirtualBox () {
    if lspci | grep -i virtualbox -q; then
        pacman --noconfirm -S virtualbox-guest-utils virtualbox-guest-modules-arch virtualbox-guest-dkms
        echo -e "vboxguest\nvboxsf\nvboxvideo" > /etc/modules-load.d/virtualbox.conf
        systemctl enable vboxservice.service
    fi
}

upgradeSystem () {
    pacman --noconfirm -Syu > /dev/null 2> /tmp/err || errorDialog "Can not upgrade the system. Are you connected to internet?"
    pacman -S --noconfirm \
           base-devel \
           net-tools \
           pkgfile \
           xf86-video-vesa \
           curl \
           wget \
           git \
           grep  > /dev/null 2> /tmp/err || errorDialog "Failed to install basic packages. Check your internet connection please."
}

installYaourt () {
    git clone https://aur.archlinux.org/package-query.git /tmp/package-query > /dev/null 2> /tmp/err || errorDialog "Can not install AUR"
    cd /tmp/package-query
    yes | makepkg -si > /dev/null 2> /tmp/err || errorDialog "Can not build AUR"

    git clone https://aur.archlinux.org/yaourt.git > /dev/null 2> /tmp/err || errorDialog "Can not install Yaourt"
    cd /tmp/yaourt
    yes | makepkg -si 2> /tmp/err || errorDialog "Can not build Yaourt"
}

installDesktop () {
    pacman -S --noconfirm xorg \
           xorg-init \
           xmonad \
           xmonad-contrib \
           xmobar \
           feh \
           unclutter \
           firefox \
           scrot \
           dmenu > /dev/null 2> /tmp/err || errorDialog "Failed to install desktop packages. Are you connected to internet?"
}

installDevTools () {
    pacman -S --noconfirm go \
           emacs \
           vim \
           node \
           python \
           python-pip \
           mariadb > /dev/null 2> /tmp/err || errorDialog "Failed to install programming packages. Are you connected to internet?"

    installNode
}

installCLITools () {
    pacman -S --noconfirm \
           tmux \
           acpi \
           newsbeuter \
           htop > /dev/null 2> /tmp/err || errorDialog "Failed to install command-line utilities. Are you connected to internet?"
}

installMedia () {
    pacman -S alsa-utils mplayer moc > /dev/null 2> /tmp/err || errorDialog "Failed to install media"
}

installFonts () {
    pacman -S ttf-dejavu \
        ttf-droid \
        ttf-inconsolata \
        ttf-symbola \
        ttf-bitstream-vera \
        terminus-font \
        ttf-fira-mono \
        ttf-fira-sans \
        adobe-source-code-pro-fonts > /dev/null 2> /tmp/err || errorDialog "Failed to install fonts"

    yaourt -S --noconfirm \
           ttf-mac-fonts \
           system-san-francisco-font-git \
           ttf-monaco > /dev/null 2> /tmp/err || errorDialog "Failed to install Mac fonts. Are you connected to internet?"
}

installURXVT () {
    yaourt --noconfirm -S rxvt-unicode-256xresources > /dev/null 2> /tmp/err || errorDialog "Failed to install RXVT-Unicode with 256 colors"
}
CHECK="[OK]"

startingDialogs () {
    name=$(dialog --stdout \
                  --title "=^.^=" \
                  --backtitle "Happy Hacking Linux" \
                  --defaultno \
                  --ok-label "Next" \
                  --nocancel \
                  --inputbox "Oh, hai. What is your name?" 8 55 "$name")

    username=$(echo "$name" | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr A-Z a-z)

    username=$(dialog --stdout \
                      --title "=^.^=" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Next" \
                      --nocancel \
                      --inputbox "And your username preference?" 8 55 "$username")

    dotFilesRepo=$(dialog --stdout \
                      --title "=^.^=" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Next" \
                      --cancel-label "Skip" \
                      --inputbox "Where is your dotfiles located?" 8 55 "https://github.com/$username/dotfiles.git")
}

mainMenu () {
    icon1=""
    icon2=""
    icon3=""
    icon4=""
    icon5=""

    getvar "partition-step"
    if [ "$value" = "done" ]; then
        icon1="${CHECK} "
    fi

    getvar "core-install-step"
    if [ "$value" = "done" ]; then
        icon2="${CHECK} "
    fi

    getvar "users-step"
    if [ "$value" = "done" ]; then
        icon3="${CHECK} "
    fi

    getvar "install-packages-step"
    if [ "$value" = "done" ]; then
        icon4="${CHECK} "
    fi

    getvar "localization-step"
    if [ "$value" = "done" ]; then
        icon5="${CHECK} "
    fi

    selected=$(dialog --stdout \
                      --title "=^.^=" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Select" \
                      --cancel-label "Welcome Screen" \
                      --menu "Complete the following installation steps one by one." 16 55 8 \
                      1 "${icon1}Setup Disk Partitions" \
                      2 "${icon2}Install Core System" \
                      3 "${icon3}Create Users" \
                      4 "${icon4}Install Packages" \
                      5 "${icon5}Localize" \
                      6 "Reboot")
}

diskMenu () {
    disks=$(lsblk -r | grep disk | cut -d" " -f1,4 | nl)
    disksArray=()
    while read i name size; do
        disksArray+=($i "/dev/$name ($size)")
    done <<< "$disks"

    selected=$(dialog --stdout \
                      --title "Installation Disk" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Next" \
                      --cancel-label "Main Menu" \
                      --menu "Select A Disk" \
                      15 30 30 \
                      "${disksArray[@]}")

    selected=$(lsblk -r | grep disk | cut -d" " -f1 | sed -n "${selected}p")
    selected="/dev/${selected}"
    setvar "disk" "$selected"
}

partitionMenu () {
    selected=$(dialog --stdout \
                      --title "Setup Disk Partitions" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Select" \
                      --cancel-label "Main Menu" \
                      --menu "How do you want to create partitions? If you got nothing to lose in $1, just go with the simple option and format the disk completely. Or, choose one of the tools to modify your disk in your own risk." 17 55 5 \
                      1 "Simple: Erase Everything on $1" \
                      2 "Manual: Using cfdisk" \
                      3 "Manual: Using fdisk" \
                      4 "Manual: Using GNU Parted")
}

partitionSelectionForm () {
    values=$(dialog --stdout \
                    --ok-label "Done" \
	                  --backtitle "Happy Hacking Linux" \
	                  --title "Select Partitions" \
                    --nocancel \
	                  --form "" \
                    7 50 0 \
	                  "Root: "    2 1	"${1}1"  	2 10 45 0)

    systempt=$(echo "$values" | tail -n1)

    if [[ -z "${systempt// }" ]]; then
        dialog --title "Select System Partition" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "Sorry, you have to choose the partition you'd like to install the system." 6 50
        partitionSelectionForm
    else
        setvar "system-partition" $systempt
    fi
}

usernameDialog () {
    username=$(dialog --stdout \
                      --title "Creating Users" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Done" \
                      --nocancel \
                      --inputbox "Choose your username" 8 50)

    if [[ -z "${username// }" ]]; then
        dialog --title "Creating Users" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "A username is required, try again" 5 50
        usernamedDialog
    fi
}

passwordDialog () {
    password=$(dialog --stdout \
                           --title "Creating User" \
                           --backtitle "Happy Hacking Linux" \
                           --ok-label "Done" \
                           --nocancel \
                           --passwordbox "Type a new password:" 8 50)

    passwordRepeat=$(dialog --stdout \
                            --title "Creating User" \
                            --backtitle "Happy Hacking Linux" \
                            --ok-label "Done" \
                            --nocancel \
                            --passwordbox "Verify your new password:" 8 50)

    if [ "$password" != "$passwordRepeat" ]; then
        dialog --title "Password" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "Passwords you've typed don't match. Try again." 5 50
        passwordDialog
    fi

    if [[ -z "${password// }" ]]; then
        dialog --title "Password" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "A password is required. Try again." 5 50
        passwordDialog
    fi
}

errorDialog () {
    echo "$1\n\n" > ./install-errors.log
    [[ -f /tmp/err ]] && cat /tmp/err >> ./install-errors.log

    echo "Message: $1\nOutput: \n" | cat - /tmp/err > /tmp/err.bak && mv /tmp/err.bak /tmp/err

    dialog --title "Oops, there was an error" \
           --backtitle "Happy Hacking Linux" \
           --textbox /tmp/err 20 50

    rm /tmp/err
    mainMenuStep
}

dotFilesDialog () {
    getvar "username"

    dotFilesRepo=$(dialog --stdout \
                          --title "dotfiles" \
                          --backtitle "Happy Hacking Linux" \
                          --cancel-label "Skip" \
                          --ok-label "Clone & Link All" \
                          --inputbox "Where is your dotfiles located?" 8 50 "https://github.com/$username/dotfiles.git")
}
command=$1

mainMenuStep () {
    mainMenu

    if [ "$selected" = "1" ]; then
        partitionStep
    elif [ "$selected" = "2" ]; then
        coreInstallStep
    elif [ "$selected" = "3" ]; then
        usersStep
    elif [ "$selected" = "4" ]; then
        installPackagesStep
    elif [ "$selected" = "5" ]; then
        localizeStep
    elif [ "$selected" = "6" ]; then
        rebootStep
    else
        startingStep
    fi
}

installVirtualBoxStep () {
    # Install VirtualBox Guest additions if the installation is running in a VirtualBox machine
    if lspci | grep -i virtualbox -q; then
        dialog --infobox "Installing VirtualBox Guest Additions" 10 50; installVirtualBox
    fi
}

installDotFilesStep () {
    getvar "dot-files-repo"
    dotFilesRepo=$value

    if [[ -n "${dotFilesRepo// }" ]]; then
        dialog --infobox "Linking your dotfiles into ~/" 10 50; linkDotFiles $1

        if [ -f /home/$username/$dotFilesBase/post-install.sh ]; then
            dialog --infobox "Running personal post-install commands..." 10 50; sh /home/$username/$dotFilesBase/post-install.sh
        fi
    fi
}

installBootStep () {
    getvar "boot-install-step"
    if [ "$value" != "done" ]; then
        dialog --infobox "Installing GRUB for /boot" 10 50; installGRUB
        setvar "boot-install-step" "done"
    fi
}

installPackagesStep () {
    getvar "install-packages-step"
    if [ "$value" == "done" ]; then
        return
    fi

    dialog --infobox "Upgrading system" 10 50; upgradeSystem
    dialog --infobox "Installing Oh My ZSH" 10 50; installOhMyZSH
    dialog --infobox "Installing AUR and Yaourt" 10 50; installYaourt
    dialog --infobox "Installing Programming Packages" 10 50; installDevTools
    dialog --infobox "Installing CLI Utilities" 10 50; installDevTools
    dialog --infobox "Installing Fonts" 10 50; installFonts
    dialog --infobox "Installing 256 Color Terminal (URXVT)" 10 50; installURXVT
    dialog --infobox "Installing Xmonad Desktop" 10 50; installDesktop

    linkDotFiles "https://github.com/happy-hacking-linux/dotfiles.git"
    installDotFilesStep
    installVirtualBoxStep
    installBootStep

    setvar "install-packages-step" "done"
}

rebootStep () {
    dialog --infobox "Cya!" 10 50; sleep 3 && reboot
}

usersStep () {
  getvar "users-step"
  if [ "$value" != "done" ]; then
      getvar "username"
      username=$value

      getvar "name"
      name=$value

      passwordDialog
      createUser $username $password $name

      setvar "users-step" "done"
  fi

  mainMenuStep
}

localizationStep () {
    getvar "localization-step"
    if [ "$value" != "done" ]; then
        localize
        setvar "localization-step" "done"
    fi

    usersStep
}

coreInstallStep () {
    getvar "core-install-step"
    if [ "$value" != "done" ]; then
        dialog --infobox "Installing core system packages, please wait..." 10 50; installCoreSystem
        afterCoreInstallStep
        setvar "core-install-step" "done"
    fi
}

partitionStep () {
    diskMenu
    disk=$selected

    partitionMenu $disk

    if [ "$selected" = "1" ]; then
        autoPartition $disk
    elif [ "$selected" = "2" ]; then
        cfdisk $disk
        partitionSelectionForm $disk
    elif [ "$selected" = "3" ]; then
        fdisk $disk
        partitionSelectionForm $disk
    elif [ "$selected" = "4" ]; then
        parted $disk
        partitionSelectionForm $disk
    elif [ "$selected" = "5" ]; then
        mainMenuStep
    else
        mainMenuStep
    fi

    setvar "partition-step" "done"
    coreInstallStep
}

startingStep () {
    init
    startingDialogs

    setvar "name" $name
    setvar "username" $username
    setvar "dotFilesRepo" $dotFilesRepo

    if [ "$selected" = "1" ]; then
        partitionStep
    else
        mainMenuStep
    fi
}

if [ "$command" = "continue" ]; then
    afterCoreInstallStep
else
    startingStep
fi
