touch ./install-vars

setvar () {
    grep -v "^$1=" ./install-vars > ./install-vars.new && mv ./install-vars.new ./install-vars
    echo "$1=$2" >> ./install-vars
}

getvar () {
    value=$(grep "^$1=" ./install-vars | tail -n 1 | sed "s/^$1=//")
}
DISTRO_DL="https://git.io/vXbTE"

autoPartition () {
    parted /dev/sda --script mklabel msdos \
           mkpart primary ext4 0% 100% \
           set 1 boot on 2> /tmp/err || errorDialog "Failed to create disk partitions"
    mkfs.ext4 /dev/sda1 > /dev/null 2> /tmp/error || error "Failed to format the root partition"
}

installCoreSystem () {
    getvar "system-partition"
    systempt=$value

    getvar "boot-partition"
    bootpt=$value

    mount $systempt /mnt
    pacstrap /mnt base
    genfstab -U /mnt >> /mnt/etc/fstab

    arch-chroot /mnt <<EOF
mkdir -p /usr/local/installer && cd /usr/local/installer
curl -L $DISTRO_DL > ./install
echo "system-partition=$systempt\nboot-partition=$bootpt"
chmod +x ./install
pacman -Sy --noconfirm dialog
./install continue
EOF
}

installGRUB () {
    pacman -Sy --noconfirm grub 2> /tmp/err || errorDialog "Failed to install GRUB"
    getvar "boot-partition"
    grub-install --target=i386-pc $value 2> /tmp/err || errorDialog "Failed to install GRUB"
}

localize () {
    tzselect 2> /tmp/error || errorDialog "tzselect is missing"
    hwclock --systohc
    sed -i -e '/^#en_US/s/^#//' /etc/locale.gen # uncomment lines starting with #en_US
    locale-gen 2> /tmp/error || errorDialog "locale-gen is missing"

    # FIX ME: Allow user to choose language and keyboard
    echo "LANG=en_US.UTF-8" >> /etc/locale.conf
    echo "FONT=Lat2-Terminus16" >> /etc/vconsole.conf
}

createUser () {
    useradd -m -s /bin/bash $1
    echo "$1:$2" | chpasswd

    echo "$1 ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    echo $1 > /etc/hostname
    echo "127.0.1.1	$1.localdomain	$1" >> /etc/hosts
}

linkDotFiles () {
    getvar "dot-files-repo"
    dotFilesRepo=$value

    getvar "username"
    username=$value

    su - $username
    git clone $dotFilesRepo ~/.
    dotFilesBase=$(basename "$dotFilesRepo")
    ln -s ~/$dotFilesBase/.* ~/
    exit
}

installLTSKernel () {
    pacman -S --noconfirm linux-lts linux-lts-headers 2> /tmp/err || error "Can not install Linux LTS Kernel"
    sed -i '/GRUB_DEFAULT=0/c\GRUB_DEFAULT=saved' /etc/default/grub
    sed -i '/GRUB_GFXMODE=auto/c\GRUB_GFXMODE=1024x768x32' /etc/default/grub
    sed -i -e '/^#GRUB_COLOR_NORMAL/s/^#//' /etc/locale.gen
    sed -i -e '/^#GRUB_COLOR_HIGHLIGHT/s/^#//' /etc/locale.gen
    echo "GRUB_SAVEDEFAULT=true" >> /etc/default/grub
    echo "GRUB_DISABLE_SUBMENU=y" >> /etc/default/grub
}

installNode () {
    curl https://raw.github.com/creationix/nvm/master/install.sh | bash
	  source ~/.nvm/nvm.sh
    nvm install 7.1.0
	  nvm use 7.1.0
	  nvm alias default 0.10
}

installZSH () {
	  curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
	  echo "source ~/dotfiles/.zshrc \nsource ~/dotfiles/.nvm \nsource ~/localbin/bashmarks/bashmarks.sh\nsource ~/.nvm/nvm.sh" > ~/.zshrc
	  chsh -s $(which zsh)
}

installSpacemacs () {
    git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
}

installVimrc () {
    git clone git://github.com/amix/vimrc.git ~/.vim_runtime
    sh ~/.vim_runtime/install_awesome_vimrc.sh
}

installVimJanus () {
    curl -L https://bit.ly/janus-bootstrap | bash
}

installVirtualBox () {
    pacman --noconfirm -Sy virtualbox-guest-utils virtualbox-guest-modules virtualbox-guest-modules-lts virtualbox-guest-dkms
    echo "vboxguest\nvboxsf\nvboxvideo" > /etc/modules-load.d/virtualbox.conf
    systemctl enable vboxservice.service
}

installExtraPackages () {
    sudo pacman --no-confirm -Syu 2> /tmp/err || errorDialog "Can not install updates."
    sudo pacman -Sy --noconfirm base-devel \
         net-tools \
         pkgfile \
         xf86-video-vesa \
         xorg-server \
         xorg-server-utils \
         xorg-apps \
         ttf-dejavu \
         ttf-droid \
         ttf-inconsolata \
         ttf-symbola \
         ttf-ancient-fonts \
         ttf-bitstream-vera \
         terminus-font \
         curl \
         wget \
         git \
         tmux \
         zsh \
         checkinstall \
         firefox \
         xmonad \
         xmobar \
         feh \
         scrot \
v         moc \
         newsbeuter \
         dmenu \
         rxvt-unicode \
         emacs \
         vim \
         htop \
         go 2> /tmp/err || errorDialog "Failed to complete installing extra packages"
}
welcomeMenu () {
g    dialog --title "=^.^=" \
           --backtitle "Happy Hacking Linux" \
           --defaultno \
           --no-label "Next Step" \
           --yes-label "Main Menu" \
           --yesno "Oh, hai. This is the installation wizard of Happy Hacking Linux. If you already started the installation, you can jump to the main menu and run a specific installation step. Otherwise, just hit the next button. \n\nIf you need help or wanna report an issue, go to github.com/azer/happy-hacking-linux" 13 55

    selected=$?
}

mainMenu () {
    selected=$(dialog --stdout \
                      --title "=^.^=" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Select" \
                      --nocancel \
                      --menu "Complete the following installation steps one by one." 16 55 8 \
                      1 "Setup Disk Partitions" \
                      2 "Install Core Packages" \
                      3 "Install Boot (GRUB)" \
                      4 "Localization" \
                      5 "Users" \
                      6 "Install Extras"
                      7 "Reboot")
}

extrasMenu () {
    selected=$(dialog --stdout \
                      --title "Install Extras" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Install" \
                      --cancel-label "Main Menu" \
                      --menu "You can optionally setup some extra stuff, or return to main menu and reboot." 16 55 7 \
                      1 "dotfiles" \
                      2 "ZSH" \
                      3 "spacemacs: emacs distribution" \
                      4 "amix/vimrc: popular vim distributon" \
                      5 "janus: another popular vim distro" \
                      6 "VirtualBox Guest Additions")
}

partitionMenu () {
    selected=$(dialog --stdout \
                      --title "Setup Disk Partitions" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Select" \
                      --cancel-label "Main Menu" \
                      --menu "We need to prepare your disk for installation. If you got nothing to lose in your hard disk, just go with the simple option and format the disk completely. Or, choose one of the tools to modify your disk in your own risk." 17 55 5 \
                      1 "Simple: Erase Everything" \
                      2 "Manual: Using cfdisk" \
                      3 "Manual: Using fdisk" \
                      4 "Manual: Using GNU Parted")
}

partitionSelectionForm () {
    values=$(dialog --stdout \
                    --ok-label "Done" \
	                  --backtitle "Happy Hacking Linux" \
	                  --title "Select Partitions" \
                    --nocancel \
	                  --form "" \
                    7 50 0 \
	                  "/boot" 1 1	"/dev/sda1" 	1 10 45 0 \
	                  "/"    2 1	"/dev/sda1"  	2 10 45 0)

    bootpt=$(echo "$values" | head -n1)
    systempt=$(echo "$values" | tail -n1)

    if [[ (-z "${bootpt// }") || (-z "${systempt// }") ]]; then
        echo "bad input $bootpt and $systempt"
        dialog --title "Select Partitions" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "You need to fill both fields" 6 50
        partitionForm
    else
        setvar "boot-partition" $bootpt
        setvar "system-partition" $systempt
    fi
}

usernameDialog () {
    username=$(dialog --stdout \
                      --title "Creating Users" \
                      --backtitle "Happy Hacking Linux" \
                      --ok-label "Done" \
                      --nocancel \
                      --inputbox "Choose your username" 8 50)

    if [[ -z "${username// }" ]]; then
        dialog --title "Creating Users" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "A username is required, try again" 5 50
        usernamedDialog
    fi
}

passwordDialog () {
    password=$(dialog --stdout \
                           --title "=^.^=" \
                           --backtitle "Happy Hacking Linux" \
                           --ok-label "Done" \
                           --nocancel \
                           --passwordbox "Type a new password:" 8 50)

    passwordRepeat=$(dialog --stdout \
                            --title "=^.^=" \
                            --backtitle "Happy Hacking Linux" \
                            --ok-label "Done" \
                            --nocancel \
                            --passwordbox "Verify your new password:" 8 50)

    if [ "$password" != "$passwordRepeat" ]; then
        dialog --title "Password" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "Passwords you've typed don't match. Try again." 5 50
        passwordDialog
    fi

    if [[ -z "${password// }" ]]; then
        dialog --title "Password" \
               --backtitle "Happy Hacking Linux" \
               --msgbox "A password is required. Try again." 5 50
        passwordDialog
    fi
}

errorDialog () {
    echo "Message: $1\nOutput: \n" | cat - /tmp/err > /tmp/err.bak && mv /tmp/err.bak /tmp/err

    dialog --title "Oops, there was an error" \
           --backtitle "Happy Hacking Linux" \
           --textbox /tmp/err 20 50

    rm /tmp/err
    mainMenuStep
}

dotFilesDialog () {
    getvar "username"

    dotFilesRepo=$(dialog --stdout \
                          --title "dotfiles" \
                          --backtitle "Happy Hacking Linux" \
                          --cancel-label "Skip" \
                          --ok-label "Clone & Link All" \
                          --inputbox "Where is your dotfiles located?" 8 50 "git@github.com:"$username"/dotfiles.git")
}
command=$1

mainMenuStep () {
    mainMenu

    if [ "$selected" = "1" ]; then
        partitionStep
    elif [ "$selected" = "2" ]; then
        coreInstallStep
    elif [ "$selected" = "3" ]; then
        installBootStep
    elif [ "$selected" = "4" ]; then
        localizationStep
    elif [ "$selected" = "5" ]; then
        usersStep
    elif [ "$selected" = "6" ]; then
        extrasMenuStep
    elif [ "$selected" = "7" ]; then
        rebootStep
    else
        mainMenuStep
    fi
}

extrasMenuStep () {
    extrasMenu

    if [ "$selected" = "1" ]; then
        dotFilesStep
    elif [ "$selected" = "2" ]; then
        installZSHStep
    elif [ "$selected" = "3" ]; then
        installSpacemacsStep
    elif [ "$selected" = "4" ]; then
        installVimrcStep
    elif [ "$selected" = "5" ]; then
        installVimJanusStep
    elif [ "$selected" = "6" ]; then
        installVirtualBoxStep
    elif [ "$selected" = "7" ]; then
        ltsStep
    else
        mainMenuStep
    fi
}

installVirtualBoxStep () {
    dialog --infobox "Installing VirtualBox Guest Additions" 10 50; installVirtualBox
    extrasMenuStep
}

installVimJanusStep () {
    dialog --infobox "Installing Janus Distro for Vim" 10 50; installVimJanus
    extrasMenuStep
}

installVimrc () {
    dialog --infobox "Installing amix/vimrc" 10 50; installVimrc
    extrasMenuStep
}

installSpacemacs () {
    dialog --infobox "Installing spacemacs" 10 50; installSpacemacs
    extrasMenuStep
}

installZSHStep () {
    dialog --infobox "Installing ZSH" 10 50; installZSH
    extrasMenuStep
}

dotFilesStep () {
    dotFilesDialog

    if [[ -n "${dotFilesRepo// }" ]]; then
        setvar "dot-files-repo" $dotFilesRepo

        dialog --infobox "Linking dotfiles" 10 50; linkDotFiles

        if [ -f /home/$username/$dotFilesBase/happy-hacking-post-install.sh ]; then
            dialog --infobox "Running personal post-install commands..." 10 50; sh /home/$username/$dotFilesBase/happy-hacking-post-install.sh
        fi
    fi

    extrasMenuStep
}

rebootStep () {
    dialog --infobox "Cya!" 10 50; reboot
}

usersStep () {
  usernameDialog
  setvar "username" $username

  passwordDialog
  createUser $username $password

  mainMenuStep
}

localizationStep () {
    localize
    usersStep
}

installBootStep () {
    dialog --infobox "Installing GRUB for /boot" 10 50; installGRUB
    localizationStep
}

switchToLTSStep () {
    dialog --infobox "Switching to Linux LTS Kernel as it's more stable." 10 50; installLTSKernel
}

installExtraPackagesStep () {
    dialog --infobox "Installing some additional packages, this may take some time" 10 50; installExtraPackages
}

coreInstallStep () {
    dialog --infobox "Installing core system packages, please wait..." 10 50; installCoreSystem
}

afterCoreInstallStep () {
    switchToLTSStep
    installExtraPackagesStep
    installBootStep
}

partitionStep () {
    partitionMenu

    if [ "$selected" = "1" ]; then
        autoPartition
        mkfs.ext4 /dev/sda1 > /dev/null 2> /tmp/error || error "Failed to format the disk"
        setvar "boot-partition" "/dev/sda1"
        setvar "system-partition" "/dev/sda1"
    elif [ "$selected" = "2" ]; then
        cfdisk
        partitionSelectionForm
    elif [ "$selected" = "3" ]; then
        fdisk /dev/sda
        partitionSelectionForm
    elif [ "$selected" = "4" ]; then
        parted /dev/sda
        partitionSelectionForm
    elif [ "$selected" = "5" ]; then
        mainMenuStep
    else
        mainMenuStep
    fi

    coreInstallStep
}

startingStep () {
    welcomeMenu

    if [ "$selected" = "1" ]; then
        partitionStep
    else
        mainMenuStep
    fi
}

if [ "$command" = "continue" ]; then
    afterCoreInstallStep
else
    startingStep
fi
